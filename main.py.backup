# main.py - Main entry point for Solana Trading Bot v2

import asyncio
import argparse
import logging
import sys
import os
from datetime import datetime

# Add project root to path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from config.bot_config import BotConfiguration
from core.trading.trading_bot import TradingBot
from core.trading.position_manager import PositionManager
from core.trading.risk_manager import RiskManager, TradingParameters
from core.blockchain.solana_client import SolanaClient
from core.data.token_scanner import TokenScanner
from core.data.market_data import MarketDataAggregator
from core.analysis.token_analyzer import TokenAnalyzer
from core.storage.database import Database
from ml.models.ml_predictor import MLPredictor
from monitoring.performance_tracker import PerformanceTracker
from utils.logger import setup_logging

async def main(mode: str = 'simulation'):
    """Main entry point for the trading bot"""
    
    # Setup logging
    setup_logging(level=logging.INFO)
    logger = logging.getLogger(__name__)
    
    logger.info(f"{'='*60}")
    logger.info(f"Solana Trading Bot v2 Starting - {mode.upper()} MODE")
    logger.info(f"{'='*60}")
    
    try:
        # Load configuration
        config = BotConfiguration.load_from_file('config/bot_control.json')
        trading_params = TradingParameters.load_from_file('config/trading_params.json')
        
        # Override simulation mode from command line
        if mode == 'real':
            config.simulation_mode = False
        else:
            config.simulation_mode = True
        
        # Initialize database
        db = Database(config.database_path)
        await db.initialize()
        
        # Initialize blockchain client
        solana_client = SolanaClient(
            rpc_url=config.rpc_url,
            private_key=config.wallet_private_key,
            simulation_mode=config.simulation_mode
        )
        await solana_client.connect()
        
        # Get initial balance
        balance_sol, balance_usd = await solana_client.get_wallet_balance()
        logger.info(f"Initial balance: {balance_sol:.4f} SOL (${balance_usd:.2f})")
        
        # Initialize components
        market_data = MarketDataAggregator(config)
        token_analyzer = TokenAnalyzer(db, market_data)
        token_scanner = TokenScanner(db, market_data, token_analyzer)
        ml_predictor = MLPredictor()
        
        # Load ML models if available
        if os.path.exists('data/models/enhanced'):
            ml_predictor.load_models('data/models/enhanced')
            logger.info("ML models loaded successfully")
        else:
            logger.warning("ML models not found - trading without ML predictions")
        
        # Initialize managers
        risk_manager = RiskManager(trading_params, balance_sol)
        position_manager = PositionManager(db, risk_manager)
        performance_tracker = PerformanceTracker(db)
        
        # Initialize trading bot
        trading_bot = TradingBot(
            config=config,
            trading_params=trading_params,
            solana_client=solana_client,
            token_scanner=token_scanner,
            token_analyzer=token_analyzer,
            position_manager=position_manager,
            risk_manager=risk_manager,
            ml_predictor=ml_predictor,
            performance_tracker=performance_tracker
        )
        
        # Start trading
        logger.info("Starting trading bot...")
        await trading_bot.start()
        
        # Keep running until interrupted
        try:
            while True:
                await asyncio.sleep(1)
        except KeyboardInterrupt:
            logger.info("Shutting down...")
            await trading_bot.stop()
            
    except Exception as e:
        logger.error(f"Fatal error: {e}", exc_info=True)
        sys.exit(1)
    finally:
        await solana_client.close()
        await db.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Solana Trading Bot v2')
    parser.add_argument(
        '--mode',
        choices=['simulation', 'real'],
        default='simulation',
        help='Trading mode (default: simulation)'
    )
    parser.add_argument(
        '--config',
        default='config/bot_control.json',
        help='Path to configuration file'
    )
    
    args = parser.parse_args()
    
    # Run the bot
    asyncio.run(main(args.mode))
